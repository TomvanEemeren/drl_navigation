husarion:
  environment_name: RosbotNavigation-v0
  ros_ws_abspath: /data/catkin_ws

  # Maps obtained with SLAM
  map_yaml_abspath: /data/catkin_ws/src/drl_navigation/maps/training_env_map.yaml
  map_pgm_abspath: /data/catkin_ws/src/drl_navigation/maps/training_env_map.pgm

  # Action space parameters
  init_linear_forward_speed: 0.0 # Initial linear speed in which we start each episode
  init_linear_turn_speed: 0.0 # Initial angular speed in shich we start each episode
  max_linear_speed: 0.2 # Max linear speed for going forward
  max_angular_speed: 0.2 # Max angular speed for turning left or right

  # Observation space parameters
  new_ranges: 60 # How many laser readings we jump in each observation reading, the bigger the less laser resolution
  max_laser_value: 6.0  # Value considered Ok, no wall
  min_laser_value: 0.15 # Value considered if there is an obstacle or crashed

  work_space: # 2D cube in which Husarion Cant surpass.
    x_max: 10.0
    x_min: -10.0
    y_max: 10.0
    y_min: -10.0

  precision_epsilon: 0.2 # How close we need to be to the desired point to consider it reached
  move_base_precision: 0.1  # We allow this difference between the asked linear speed and the real one. 
                            # Note that angular is not because controller is too imprecise in sim.
  
  # Reward parameters
  closer_to_point_reward: 25 # We give points for getting closer to the desired point
  alive_reward: 0 # Point we give to just not not end the episode
  goal_reached_points: 800 # Points given when ending an episode
  goal_not_reached_points: -800 # Points given when ending an episode
  c_closer: 200 # Coefficient for the closer_to_point_reward



