husarion:
  environment_name: RosbotNavigation-v0
  ros_ws_abspath: /data/catkin_ws

  # Maps obtained with SLAM
  map_yaml_abspath: /data/catkin_ws/src/drl_navigation/maps/training_env_one_object_2_map.yaml
  map_pgm_abspath: /data/catkin_ws/src/drl_navigation/maps/training_env_one_object_2_map.pgm

  robot_model_name: rosbot

  # Action space parameters
  init_linear_forward_speed: 0.0 # Initial linear speed in which we start each episode
  init_linear_turn_speed: 0.0 # Initial angular speed in shich we start each episode
  max_linear_speed: 0.2 # Max linear speed for going forward
  max_angular_speed: 1.0 # Max angular speed for turning left or right

  # Observation space parameters
  new_ranges: 8 # How many laser readings we jump in each observation reading, the bigger the less laser resolution
  max_laser_value: 10.0  # Value considered Ok, no wall
  min_laser_value: 0.2 # Value considered if there is an obstacle or crashed
  lower_angle: -1.57
  upper_angle: 1.57

  work_space: # 2D cube in which Husarion Cant surpass.
    x_max: 5.0
    x_min: -5.0
    y_max: 5.0
    y_min: -5.0

  precision_epsilon: 0.2 # How close we need to be to the desired point to consider it reached
  move_base_precision: 0.1  # We allow this difference between the asked linear speed and the real one. 
                            # Note that angular is not because controller is too imprecise in sim.
  
  # Reward parameters
  goal_reached_points: 1500
  goal_not_reached_points: -1500 
  c_obstacle: -20
  c_distance: -20
  c_linear: -50
  c_angular: -1
  c_heading: 1
  angular_threshold: 0.8
  obstacle_threshold: 0.4


